//
//  PCITests.swift
//  tests
//
//  Created by Simon Evans on 18/05/2021.
//  Copyright Â© 2021 Simon Evans. All rights reserved.
//

import XCTest
/*
struct PCITestConfigSpace: PCIConfigAccessProtocol, CustomStringConvertible {
    private let data: [UInt8]
    var size: Int { data.count }

    var description: String {
        "PCI Test data, \(data.count) bytes"
    }

    init(bytes: [UInt8]) {
        data = bytes
    }

    func readConfigByte(device: UInt8, function: UInt8, offset: UInt) -> UInt8 {
        return data[Int(offset)]
    }

    func readConfigWord(device: UInt8, function: UInt8, offset: UInt) -> UInt16 {
        return UInt16(littleEndianBytes: data[Int(offset)...])
    }

    func readConfigDword(device: UInt8, function: UInt8, offset: UInt) -> UInt32 {
        return UInt32(littleEndianBytes: data[Int(offset)...])
    }

    func writeConfigByte(device: UInt8, function: UInt8, offset: UInt, value: UInt8) {
        fatalError()
    }

    func writeConfigWord(device: UInt8, function: UInt8, offset: UInt, value: UInt16) {
        fatalError()
    }

    func writeConfigDword(device: UInt8, function: UInt8, offset: UInt, value: UInt32) {
        fatalError()
    }
}*/

class PCITests: XCTestCase {

    func testCapabilitiesList() {
        // 00:07.7 System peripheral: VMware Virtual Machine Communication Interface (rev 10)
        let pciDump: [UInt8] = [
            0xad, 0x15, 0x40, 0x07, 0x07, 0x04, 0x90, 0x02, 0x10, 0x00, 0x80, 0x08, 0x00, 0x40, 0x00, 0x00,
            0x81, 0x10, 0x00, 0x00, 0x04, 0xe0, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xad, 0x15, 0x40, 0x07,
            0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x01, 0x06, 0xff,
            0x05, 0x58, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00,
            0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]

//        let testConfig = PCITestConfigSpace(bytes: pciDump)
//        let configSpace = PCIConfigSpace(access: testConfig, device: 1, function: 0)
        let configSpace = PCIConfigSpace.bytes(pciDump)
        let deviceFunction = PCIDeviceFunction(busId: 0, device: 1, function: 0, configSpace: configSpace)
        guard deviceFunction.hasValidVendor else {
            XCTFail("Invalid PCIDeviceFunction")
            return
        }
        XCTAssertTrue(deviceFunction.status.hasCapabilities)
        XCTAssertEqual(deviceFunction.capabilitiesPtr, 64)

        guard let msiOffset = deviceFunction.findOffsetOf(capability: .msi) else {
            XCTFail("Cant find offset of MSI capability")
            return
        }
        let msi = PCICapability.MSI(offset: msiOffset, deviceFunction: deviceFunction)
        XCTAssertFalse(msi.messageControl.enabled)
        XCTAssertEqual(msi.messageControl.requestVectors, 1)
        XCTAssertTrue(msi.messageControl.is64Bit)
        XCTAssertFalse(msi.messageControl.vectorMaskingCapable)
        XCTAssertEqual(msi.messageData, 0x0)
        XCTAssertNil(msi.messageAddress32)
        XCTAssertEqual(msi.messageAddress64, 0x0)
        XCTAssertNil(msi.maskBits)
        XCTAssertNil(msi.pendingBits)

        guard let msixOffset = deviceFunction.findOffsetOf(capability: .msix) else {
            XCTFail("Cant find offset of MSI-X capability")
            return
        }
        let msix = PCICapability.MSIX(offset: msixOffset, deviceFunction: deviceFunction)
        print(msix.messageControl)
        XCTAssertEqual(msix.messageControl.tableSize, 2)
        XCTAssertFalse(msix.messageControl.functionMask)
        XCTAssertTrue(msix.messageControl.enabled)
        XCTAssertEqual(msix.tableBAR, 1)
        XCTAssertEqual(msix.tableOffset, 0x0)
        XCTAssertEqual(msix.pendingBitArrayBAR, 1)
        XCTAssertEqual(msix.pendingBitArrayOffset, 0x1000)
    }
}
